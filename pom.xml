<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- groupId: identifies the author or organization. It’s usually structured as a reversed domain name -->
    <groupId>io.github.josemanuel</groupId>
    <!-- artifactId: project name, it will be the name of the generated .jar file -->
    <artifactId>maven-by-jmendoza</artifactId>
    <!--
        Project version.

        The "-SNAPSHOT" suffix indicates this is a **development** version of the artifact. This means
        the code and the artifact may change at any time, and the version is not stable.
        Maven treats these versions as artifacts that are **continuously evolving** during the development cycle.

        ### Process stages:
        1. **Initial development**:
           - When starting the project, the version is set to `1.0-SNAPSHOT` (or any version number you choose).
           - Maven handles this as a **development version**, allowing the artifact to be built multiple times and updated with each **new build**.

        2. **Creating and publishing `SNAPSHOT` versions**:
           - Every time you run a **build** (e.g. `mvn clean install` or `mvn deploy`), Maven generates a new artifact with a `-SNAPSHOT` suffix (e.g., `1.0-20230327.121212-1`), representing a **new development version**.
           - **The generated artifact** is uploaded to the remote repository (like Nexus or Artifactory) if CI/CD is set up to do so, allowing other dependencies or projects to use the latest version.

        3. **Continuous updates**:
           - Since `SNAPSHOT` artifacts change frequently, Maven will always download the **latest available SNAPSHOT version** from the remote repository when another project depends on it.
           - This ensures that the project always uses the **most up-to-date** version of the `SNAPSHOT` artifact without manually updating the version.

        4. **Releasing a stable version**:
           - Once the project is **finished** and ready for production, it is marked as **release** (e.g., `1.0.0`).
           - This means the **final** artifact won’t be modified and no new `SNAPSHOT` versions will be generated.
           - From that moment on, the artifact is considered a **stable version** and will not change automatically, unlike `SNAPSHOT` versions.

        ### Summary:
        - **SNAPSHOT version**: Used during development. It can be overwritten with each build.
        - **Release version**: Defined when the project is production-ready. It is stable and doesn't change.
        - **Remote repository upload**: When building with a `SNAPSHOT` version, the artifact is uploaded (if configured), making it available to other projects.
    -->
    <version>1.0-SNAPSHOT</version>

    <!-- Descriptive name (optional but recommended) -->
    <name>Maven Tutorial by Jose Manuel</name>

    <!-- Developer information (optional but professional) -->
    <developers>
        <developer>
            <id>jmmendoza2911</id>
            <name>Jose Manuel</name>
            <email>jmmendoza2911@outlook.com</email>
        </developer>
    </developers>

    <properties>
        <!-- Sets the encoding for project source files (UTF-8) -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- Sets the encoding for generated reports (UTF-8) -->
        <project.reporting.OutputEncoding>UTF-8</project.reporting.OutputEncoding>
        <!-- Defines the Java version used in the project -->
        <java.version>11</java.version>
        <!--
            Specifies the Java version used to compile source code.
            This property defines which Java language features are allowed during the compilation of source files (.java).
            For example, if Java 11 is used, you can use features like 'var' for type inference or new APIs.
            The Maven compiler processes source code according to this version and generates .class files accordingly.
        -->
        <maven.compiler.source>${java.version}</maven.compiler.source>

        <!--
            Specifies the Java version for which the bytecode (.class files) will be generated.
            This property defines which JVM version the resulting bytecode will be compatible with.
            Even if you use newer language features (e.g., Java 11), the generated bytecode will
            be compatible with the JVM version specified in 'maven.compiler.target'.
            For example, if it's set to 1.8, the bytecode will run on a Java 8 JVM,
            even if the source code uses newer syntax.
        -->
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.8.1</version>
        </dependency>
    </dependencies>

    <!--
        The <build> section defines how the project is built.

        This is where you specify plugins that add additional behaviors to the build process,
        such as compiling, testing, packaging, copying files, running scripts, etc.
    -->
    <build>
        <plugins>
            <!--
                Plugin: maven-antrun-plugin

                This plugin allows you to run Ant tasks within the Maven lifecycle.
                Ant is another build tool (more flexible but less structured than Maven),
                and this plugin lets you integrate Ant functionality into Maven.

                It's commonly used for custom tasks like printing messages, copying/deleting files,
                modifying content, generating auxiliary files, etc.
            -->
            <plugin>
                <!-- Standard group for official Maven plugins -->
                <groupId>org.apache.maven.plugins</groupId>

                <!-- Plugin name -->
                <artifactId>maven-antrun-plugin</artifactId>

                <!-- Plugin version -->
                <version>1.8</version>

                <!--
                    <executions> defines one or more specific executions of the plugin.
                    Each execution can be bound to a different phase and have its own configuration.
                -->
                <executions>
                    <execution>
                        <!-- Unique ID for this execution -->
                        <id>mensaje-en-compile</id>

                        <!--
                            Phase of the build lifecycle when this execution runs.
                            In this case: "compile", which is when Maven compiles the source code.
                        -->
                        <phase>compile</phase>

                        <!--
                            List of goals from the plugin to be executed.
                            The 'run' goal allows running a series of tasks defined under <tasks>.
                        -->
                        <goals>
                            <goal>run</goal>
                        </goals>

                        <!--
                            Configuration specific to the 'run' goal.
                            Here we define Ant tasks, such as printing a message.
                        -->
                        <configuration>
                            <tasks>
                                <!-- Ant task: prints a message to the console during the 'compile' phase -->
                                <echo message="🛠️ Hello Jose Manuel! This message runs during the compile phase." />
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
