<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- groupId: identifica al autor o grupo. Puede ser como un dominio invertido -->
    <groupId>io.github.josemanuel</groupId>
    <!-- artifactId: nombre del proyecto, será el nombre del .jar generado -->
    <artifactId>maven-by-jmendoza</artifactId>
    <!--
        Versión del proyecto.

        El sufijo "-SNAPSHOT" indica que esta es una versión **en desarrollo** del artefacto. Esto significa que
        el código y el artefacto pueden cambiar en cualquier momento, y la versión del proyecto no es estable.
        Maven gestiona estas versiones como artefactos que están **en constante cambio** durante el ciclo de desarrollo.

        ### Pasos del proceso:
        1. **Desarrollo inicial**:
           - Cuando comienzas a desarrollar el proyecto, la versión se define como `1.0-SNAPSHOT` (o cualquier número de versión que elijas).
           - Maven tratará esta versión como una **versión en desarrollo**. Esto permite que el artefacto se construya varias veces, con la posibilidad de actualizarse con cada **nuevo build**.

        2. **Creación y publicación de versiones `SNAPSHOT`**:
           - Cada vez que haces un **build** (ej. `mvn clean install` o `mvn deploy`), Maven genera un nuevo artefacto con el sufijo `-SNAPSHOT` (por ejemplo, `1.0-20230327.121212-1`), que es una **nueva versión en desarrollo**.
           - **El artefacto generado** se sube al repositorio remoto (por ejemplo, Nexus o Artifactory) si el proceso de CI/CD está configurado para hacerlo, permitiendo que otras dependencias o proyectos usen esa versión más reciente.

        3. **Actualización continua**:
           - Como los artefactos `SNAPSHOT` pueden cambiar frecuentemente, Maven descargará siempre la **última versión `SNAPSHOT` disponible** en el repositorio remoto cuando otro proyecto dependa de él.
           - Esto garantiza que el proyecto siempre esté usando la **versión más actual** del artefacto `SNAPSHOT` sin necesidad de cambiar manualmente la versión en los archivos `pom.xml` de los proyectos que dependen de este artefacto.

        4. **Release de la versión estable**:
           - Una vez que el proyecto está **completo** y listo para producción, se marca **como `isRelease`** (por ejemplo, `1.0.0`).
           - Esto significa que el artefacto **final** ya no será modificado y no se generarán nuevas versiones `SNAPSHOT`.
           - A partir de ese momento, el artefacto se considera una **versión estable** que no cambiará automáticamente, a diferencia de las versiones `SNAPSHOT`.

        ### Resumen:
        - **Versión `SNAPSHOT`**: Se utiliza mientras el proyecto está en desarrollo. Puede ser sobrescrita con cada build.
        - **Versión final (Release)**: Se marca cuando el proyecto está listo para producción, indicando que la versión no cambiará y es estable.
        - **Subida al repositorio remoto**: Cuando se realiza un build con una versión `SNAPSHOT`, el artefacto se sube al repositorio (si está configurado), permitiendo que otros proyectos lo utilicen.
    -->
    <version>1.0-SNAPSHOT</version>

    <!-- nombre descriptivo (opcional pero recomendable) -->
    <name>Maven Tutorial by Jose Manuel</name>

    <!-- desarrollador (opcional pero profesional) -->
    <developers>
        <developer>
            <id>jmmendoza2911</id>
            <name>Jose Manuel</name>
            <email>jmmendoza2911@outlook.com</email>
        </developer>
    </developers>


    <properties>
        <!-- Establece la codificación de los archivos fuente del proyecto (UTF-8) -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- Establece la codificación de salida de los informes generados (UTF-8) -->
        <project.reporting.OutputEncoding>UTF-8</project.reporting.OutputEncoding>
        <!-- Define la versión de Java que se usará en el proyecto -->
        <java.version>11</java.version>
        <!--
            Establece la versión de Java que se usará para compilar el código fuente.
            Esta propiedad define qué características del lenguaje Java están permitidas durante la compilación del código fuente (.java).
            Por ejemplo, si se usa Java 11, podrás usar características de esa versión como 'var' para inferencia de tipos o nuevas APIs.
            El compilador de Maven procesará el código fuente teniendo en cuenta esta versión,
            permitiendo que se utilicen características correspondientes a esa versión de Java.
            El resultado de la compilación será un archivo .class, que es el bytecode correspondiente al código fuente.
        -->
        <maven.compiler.source>${java.version}</maven.compiler.source>

        <!--
            Establece la versión de Java para la que se generará el bytecode (archivos .class) durante la compilación.
            Esta propiedad indica la versión de la JVM con la que el bytecode resultante será compatible.
            Aunque el código fuente puede usar características más nuevas (por ejemplo, Java 11), el bytecode generado
            será compatible con la versión de JVM especificada en 'maven.compiler.target'.
            Por ejemplo, si se establece en 1.8, el bytecode se generará de forma que sea ejecutable en una JVM de Java 8,
            incluso si el código fuente usa características de una versión más reciente de Java.
        -->
        <maven.compiler.target>${java.version}</maven.compiler.target>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.8.1</version>
        </dependency>
    </dependencies>

</project>